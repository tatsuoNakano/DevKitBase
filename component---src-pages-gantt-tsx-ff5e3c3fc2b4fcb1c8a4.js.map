{"version":3,"file":"component---src-pages-gantt-tsx-ff5e3c3fc2b4fcb1c8a4.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/pages/gantt.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Layout from \"../components/Common/Layout\";\r\n\r\ntype Task = {\r\n    id: string;\r\n    name: string;\r\n    start: string;\r\n    end: string;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n    const hue = Math.floor(Math.random() * 360);\r\n    return `hsl(${hue}, 70%, 55%)`;\r\n};\r\n\r\nconst GanttChart: React.FC = () => {\r\n    const svgRef = useRef<SVGSVGElement | null>(null);\r\n    const containerRef = useRef<HTMLDivElement | null>(null);\r\n    const [tasks, setTasks] = useState<Task[]>([]);\r\n    const [newTask, setNewTask] = useState({ name: \"\", start: \"\", end: \"\" });\r\n    const [chartSize, setChartSize] = useState({ width: 0, height: 0 });\r\n\r\n    useEffect(() => {\r\n        const stored = localStorage.getItem(\"ganttTasks\");\r\n        if (stored) {\r\n            setTasks(JSON.parse(stored));\r\n        } else {\r\n            setTasks([\r\n                { id: \"1\", name: \"要件定義\", start: \"2025-07-08\", end: \"2025-07-10\" },\r\n                { id: \"2\", name: \"設計\", start: \"2025-07-11\", end: \"2025-07-14\" },\r\n                { id: \"3\", name: \"実装\", start: \"2025-07-15\", end: \"2025-07-20\" }\r\n            ]);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"ganttTasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    useEffect(() => {\r\n        const updateSize = () => {\r\n            if (containerRef.current) {\r\n                setChartSize({\r\n                    width: containerRef.current.offsetWidth,\r\n                    height: window.innerHeight - 200\r\n                });\r\n            }\r\n        };\r\n        updateSize();\r\n        window.addEventListener(\"resize\", updateSize);\r\n        return () => window.removeEventListener(\"resize\", updateSize);\r\n    }, []);\r\n\r\n    const renderChart = () => {\r\n        if (!svgRef.current || chartSize.width === 0) return;\r\n\r\n        d3.selectAll(\".d3-tooltip\").remove();\r\n\r\n        const margin = { top: 40, right: 80, bottom: 40, left: 80 };\r\n        const width = chartSize.width - margin.left - margin.right;\r\n        const height = Math.max(tasks.length * 30, chartSize.height - margin.top - margin.bottom);\r\n\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll(\"*\").remove();\r\n\r\n        const chart = svg\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n        const parseDate = d3.timeParse(\"%Y-%m-%d\");\r\n        const taskData = tasks.map(task => ({\r\n            ...task,\r\n            startDate: parseDate(task.start)!,\r\n            endDate: parseDate(task.end)!,\r\n            color: getRandomColor()\r\n        }));\r\n\r\n        const xScale = d3\r\n            .scaleTime()\r\n            .domain([\r\n                d3.min(taskData, d => d.startDate)!,\r\n                d3.max(taskData, d => d.endDate)!\r\n            ])\r\n            .range([0, width]);\r\n\r\n        const yScale = d3\r\n            .scaleBand()\r\n            .domain(taskData.map(d => d.name))\r\n            .range([0, height])\r\n            .padding(0.2);\r\n\r\n        chart.append(\"g\")\r\n            .attr(\"transform\", `translate(0, ${height})`)\r\n            .call(d3.axisBottom(xScale).ticks(d3.timeDay.every(1)).tickFormat(d3.timeFormat(\"%m/%d\")))\r\n            .selectAll(\"text\").attr(\"fill\", \"#ccc\");\r\n\r\n        chart.append(\"g\")\r\n            .call(d3.axisLeft(yScale))\r\n            .selectAll(\"text\").attr(\"fill\", \"#ccc\");\r\n\r\n        const tooltip = d3.select(\"body\")\r\n            .append(\"div\")\r\n            .attr(\"class\", \"d3-tooltip\")\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"background\", \"#212529\")\r\n            .style(\"color\", \"#fff\")\r\n            .style(\"padding\", \"6px 12px\")\r\n            .style(\"border\", \"1px solid #444\")\r\n            .style(\"border-radius\", \"4px\")\r\n            .style(\"pointer-events\", \"none\")\r\n            .style(\"font-size\", \"0.9rem\")\r\n            .style(\"z-index\", \"9999\")\r\n            .style(\"opacity\", 0);\r\n\r\n        chart\r\n            .selectAll(\"rect\")\r\n            .data(taskData)\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", d => xScale(d.startDate))\r\n            .attr(\"y\", d => yScale(d.name)!)\r\n            .attr(\"width\", d => xScale(d.endDate) - xScale(d.startDate))\r\n            .attr(\"height\", yScale.bandwidth())\r\n            .attr(\"fill\", d => d.color)\r\n            .on(\"mouseover\", (event, d) => {\r\n                tooltip\r\n                    .html(`<strong>${d.name}</strong><br>${d.start} ～ ${d.end}`)\r\n                    .style(\"opacity\", 1);\r\n            })\r\n            .on(\"mousemove\", event => {\r\n                tooltip\r\n                    .style(\"left\", event.pageX + 10 + \"px\")\r\n                    .style(\"top\", event.pageY - 28 + \"px\");\r\n            })\r\n            .on(\"mouseout\", () => {\r\n                tooltip.style(\"opacity\", 0);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        renderChart();\r\n    }, [tasks, chartSize]);\r\n\r\n    const addTask = () => {\r\n        if (!newTask.name || !newTask.start || !newTask.end) return;\r\n        const newId = Date.now().toString();\r\n        setTasks([...tasks, { id: newId, ...newTask }]);\r\n        setNewTask({ name: \"\", start: \"\", end: \"\" });\r\n    };\r\n\r\n    const deleteTask = (id: string) => {\r\n        setTasks(tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <div ref={containerRef} className=\"bg-dark text-white p-4 rounded\" style={{ overflow: \"hidden\" }}>\r\n                <h4 className=\"mb-3\">ガントチャート</h4>\r\n                <svg ref={svgRef} style={{ width: \"100%\", height: \"auto\" }} />\r\n\r\n                <div className=\"mt-4\">\r\n                    <h5>タスク追加</h5>\r\n                    <Form className=\"row g-2\">\r\n                        <div className=\"col-md-4\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"タスク名\"\r\n                                value={newTask.name}\r\n                                onChange={e => setNewTask({ ...newTask, name: e.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <Form.Control\r\n                                type=\"date\"\r\n                                value={newTask.start}\r\n                                onChange={e => setNewTask({ ...newTask, start: e.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <Form.Control\r\n                                type=\"date\"\r\n                                value={newTask.end}\r\n                                onChange={e => setNewTask({ ...newTask, end: e.target.value })}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-md-2\">\r\n                            <Button variant=\"info\" onClick={addTask} className=\"w-100\">\r\n                                追加\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n\r\n                <div className=\"mt-3\">\r\n                    <h5>登録済みタスク</h5>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {tasks.map(task => (\r\n                            <li\r\n                                key={task.id}\r\n                                className=\"list-group-item d-flex justify-content-between align-items-center bg-dark text-white border-secondary\"\r\n                            >\r\n                                <div>\r\n                                    {task.name}（{task.start} ～ {task.end}）\r\n                                </div>\r\n                                <Button variant=\"outline-danger\" size=\"sm\" onClick={() => deleteTask(task.id)}>\r\n                                    削除\r\n                                </Button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default GanttChart;\r\n"],"names":["GanttChart","svgRef","useRef","containerRef","tasks","setTasks","useState","newTask","setNewTask","name","start","end","chartSize","setChartSize","width","height","useEffect","stored","localStorage","getItem","JSON","parse","id","setItem","stringify","updateSize","current","offsetWidth","window","innerHeight","addEventListener","removeEventListener","renderChart","d3","remove","margin","Math","max","length","svg","selectAll","chart","attr","append","parseDate","taskData","map","task","startDate","endDate","color","floor","random","xScale","domain","d","range","yScale","padding","call","ticks","every","tickFormat","tooltip","style","data","enter","bandwidth","on","event","html","pageX","pageY","React","Layout","ref","className","overflow","Form","Control","type","placeholder","value","onChange","e","target","Button","variant","onClick","addTask","newId","Date","now","toString","concat","_toConsumableArray","key","size","deleteTask","filter"],"sourceRoot":""}